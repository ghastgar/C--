// Generated by CoffeeScript 1.10.0
(function() {
  var samplePrograms;

  $(function() {
    var codeMirror, resetWorker, w;
    codeMirror = CodeMirror((function(elt) {
      return $("#code").replaceWith(elt);
    }), {
      mode: "text/x-c++src",
      value: samplePrograms["default"],
      theme: "material"
    });
    w = null;
    (resetWorker = function() {
      w = new Worker("js/run.js");
      return w.onmessage = function(e) {
        var ref, type, value;
        ref = e.data, type = ref.type, value = ref.value;
        if (type === "status") {
          return $("#exitstatus").text(value);
        } else {
          return $("#output").text(value);
        }
      };
    })();
    $("#compile").click(function() {
      return w.postMessage({
        command: "compile",
        code: codeMirror.getValue()
      });
    });
    $("#run").click(function() {
      return w.postMessage({
        command: "run",
        code: codeMirror.getValue(),
        input: $("#input").val()
      });
    });
    $("#kill").click(function() {
      $("#exitstatus").text("Killed");
      w.terminate();
      return resetWorker();
    });
    return $(".dropdown-menu li a").click(function() {
      var data, option;
      option = $(this).text();
      data = $(this).data('value');
      $(this).parents(".dropdown").find('.btn').html(option + ' <span class="caret"></span>');
      return codeMirror.getDoc().setValue(samplePrograms[data]);
    });
  });

  samplePrograms = {
    "default": "#include <iostream>\nusing namespace std;\n\nint main() {\n\n}",
    bars: "#include <iostream>\nusing namespace std;\n\nvoid escriu_estrella(int n) {\n	if (n == 0) cout << endl;\n	else {\n		cout << '*';\n		escriu_estrella(n - 1);\n	}\n}\n\nvoid escriu_barres(int n) {\n	if (n == 1) cout << '*' << endl;\n	else {\n		escriu_estrella(n);\n		escriu_barres(n - 1);\n		escriu_barres(n - 1);\n	}\n}\n\nint main() {\n	int n;\n	cin >> n;\n	escriu_barres(n);\n}",
    hanoi: "#include <iostream>\nusing namespace std;\n\nvoid hanoi(int n, char from, char to, char aux) {\n	if (n > 0) {\n		hanoi(n - 1, from, aux, to);\n		cout << from << \" => \" << to << endl;\n		hanoi(n - 1, aux, to, from);\n	}\n}\n\nint main() {\n	int ndiscos;\n	cin >> ndiscos;\n	hanoi(ndiscos, 'A', 'C', 'B');\n}"
  };

}).call(this);
